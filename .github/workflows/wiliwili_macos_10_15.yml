name: Build wiliwili (macOS 10.15)

on:
  # push:
  #   branches:
  #     - main
  # pull_request:
  workflow_dispatch:
    inputs:
      ssh_darwin:
        description: 'SSH connection to Darwin'
        required: false
        default: 'false'
      ssh_ubuntu:
        description: 'SSH connection to Ubuntu'
        required: false
        default: 'false'
      release:
        description: 'Push a new release'
        required: false
        default: 'false'
      version:
        description: 'Version'
        required: false
        default: '0.0.0'

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.info.outputs.version }}
      standard_version: ${{ steps.info.outputs.standard_version }}
      DIST_EXE: ${{ steps.info.outputs.DIST_EXE }}
      DIST_NRO: ${{ steps.info.outputs.DIST_NRO }}
      DIST_INTEL_DMG: ${{ steps.info.outputs.DIST_INTEL_DMG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: 'xfangfang/wiliwili'

      - name: Debug version
        run: |
          export VERSION=`git rev-parse --short HEAD`
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Release version
        if: github.event.inputs.release == 'true' && github.event.inputs.release != 'false' && !cancelled()
        run: |
          export VERSION="${{ github.event.inputs.version }}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Version
        id: info
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "DIST_EXE=wiliwili-Windows-x64-${VERSION}" >> $GITHUB_OUTPUT
          echo "DIST_NRO=wiliwili-NintendoSwitch-${VERSION}" >> $GITHUB_OUTPUT
          echo "DIST_INTEL_DMG=wiliwili-macOS-IntelChip-${VERSION}" >> $GITHUB_OUTPUT
          echo $VERSION
          echo "${{  github.event.inputs.version }}"

  release:
    needs: [ build-macos-intel, version ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2

      - name: Version
        run: |
          echo "DIST_INTEL_DMG=${{ needs.version.outputs.DIST_INTEL_DMG }}" >> $GITHUB_ENV
          echo $GITHUB_ENV
          ls -lah

      - name: Upload Release
        if: github.event.inputs.release == 'true' && !cancelled()
        uses: ncipollo/release-action@v1
        with:
          name: wiliwili ${{  github.event.inputs.version }}
          tag: ${{  github.event.inputs.version }}
          omitBodyDuringUpdate: true
          body: This release is built by github-action.
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: >
            ${{ env.DIST_INTEL_DMG }}/${{ env.DIST_INTEL_DMG }}.dmg

      - name: Upload WeTransfer
        if: github.event.inputs.release != 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress \
            ${{ env.DIST_INTEL_DMG }}/${{ env.DIST_INTEL_DMG }}.dmg 2>&1 | tee wetransfer.log
          echo "::warning title=免登录下载测试版::$(cat wetransfer.log | grep https)"

  build-macos-intel:
    needs: [ version ]
    runs-on: macos-11
    steps:
    
      - name: install basic deps
        run: |
          brew tap xfangfang/wiliwili
          brew install create-dmg dylibbundler mpv-wiliwili webp

      - name: cache for old deps
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/Homebrew
            /usr/local/Cellar
            /usr/local/Frameworks
            /usr/local/bin
            /usr/local/opt
            /usr/local/lib
          key: ${{ runner.os }}-wiliwili-r6

      - name: install old deps if cache not hit
        shell: zsh {0}
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          brew tap xfangfang/wiliwili
          brew developer on
          brew install create-dmg dylibbundler glm sd
          echo $PWD
          wget https://github.com/xfangfang/OpenWrt-DIY/raw/main/homebrew_x86.patch
          wget https://github.com/xfangfang/OpenWrt-DIY/raw/main/rebuild.rb
          ls
          chmod +x ./rebuild.rb
          ./rebuild.rb

      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: 'xfangfang/wiliwili'
          submodules: 'recursive'

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh_darwin == 'true' && github.event.inputs.ssh_darwin  != 'false') || contains(github.event.action, 'ssh_darwin')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Readme
        run: |
          mkdir -p dist
          echo "wiliwili" > dist/readme.txt
          echo "" >> dist/readme.txt
          echo "if you see any of these after open this application:" >> dist/readme.txt
          echo "1: wiliwili.app is damaged and can't be opened. You should move it to he Trash." >> dist/readme.txt
          echo "2: wiliwili.app can't be opened because it is from an unidentified developer." >> dist/readme.txt
          echo "" >> dist/readme.txt
          echo "Please run this command in your terminal:" >> dist/readme.txt
          echo "sudo xattr -rd com.apple.quarantine /Applications/wiliwili.app" >> dist/readme.txt

      - name: Build
        id: compile
        env:
          VERSION: ${{ needs.version.outputs.version }}
          DIST_INTEL_DMG: ${{ needs.version.outputs.DIST_INTEL_DMG }}
        run: |
          echo $VERSION $DIST_INTEL_DMG
          cmake -B build -DPLATFORM_DESKTOP=ON -DCMAKE_BUILD_TYPE=Release -DMAC_10_15=ON
          make -C build wiliwili.app -j$(nproc)
          mv build/wiliwili.app dist/
          create-dmg --window-pos 200 120 --window-size 800 400 \
            --icon-size 100 --icon "wiliwili.app" 200 190 \
            --icon "readme.txt" 400 100 --hide-extension "wiliwili.app" \
            --app-drop-link 600 185  --volicon ./scripts/mac/dmg.icns \
            --volname "wiliwili (${VERSION})" ${DIST_INTEL_DMG}.dmg "dist/"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload dist
        uses: actions/upload-artifact@v3
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ needs.version.outputs.DIST_INTEL_DMG }}
          path: "${{ needs.version.outputs.DIST_INTEL_DMG }}.dmg"
